" Maintained by Matt Ryan

" Plug {{{
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
  endif
  call plug#begin('~/.vim/plugged')

  command! PU PlugUpdate | PlugUpgrade

  " vim-scripts repos
  Plug 'vim-scripts/L9'
  Plug 'vim-scripts/YankRing.vim'
  Plug 'vim-scripts/matchit.zip'

  " Github repos
  Plug 'fatih/vim-go'
  Plug 'Arkham/vim-quickfixdo'
  Plug 'MarcWeber/vim-addon-mw-utils'
  Plug 'Raimondi/delimitMate'
  Plug 'alvan/vim-closetag'
  Plug 'bling/vim-airline'
  Plug 'chriskempson/base16-vim'
  Plug 'elzr/vim-json'
  Plug 'fadein/vim-FIGlet'
  Plug 'garbas/vim-snipmate'
  Plug 'godlygeek/tabular'
  Plug 'hail2u/vim-css3-syntax'
  Plug 'hashivim/vim-terraform'
  Plug 'kana/vim-textobj-user'
  Plug 'kien/ctrlp.vim'
  Plug 'mattn/gist-vim'
  Plug 'mattn/webapi-vim'
  Plug 'mhinz/vim-signify'
  Plug 'mileszs/ack.vim'
  Plug 'moll/vim-node'
  Plug 'rattlion/vim-insert-image'
  Plug 'mxw/vim-jsx'
  Plug 'othree/html5.vim'
  Plug 'pangloss/vim-javascript'
  Plug 'scrooloose/nerdcommenter'
  Plug 'scrooloose/nerdtree'
  Plug 'terryma/vim-multiple-cursors'
  Plug 'tomtom/tlib_vim'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-markdown'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'vim-ruby/vim-ruby'
  Plug 'w0rp/ale'
  call plug#end()
  "}}}

" VIM behaviour {{{
  let mapleader=","
  set autoindent
  set backspace=indent,eol,start
  set clipboard=unnamedplus,unnamed
  set completefunc=syntaxcomplete#Complete
  set copyindent
  set dictionary+=/usr/share/dict/words
  set formatoptions+=1,j
  set hidden
  set history=100
  set hlsearch
  set ignorecase
  set incsearch
  set linebreak
  set mouse=a
  set nobackup
  set nocursorline
  set noerrorbells
  set nolist
  set listchars=eol:⏎,tab:␉·,trail:␠,nbsp:⎵
  set nomodeline
  set noswapfile
  set nowrap
  set number
  set pastetoggle=<F2>
  set scrolloff=4
  set shell=sh
  set shiftround
  set showcmd
  set showmatch
  set showmode
  set smartcase
  set smarttab
  set expandtab
  set shiftwidth=2
  set softtabstop=2
  set switchbuf=useopen
  set synmaxcol=800
  set ttyfast
  set undodir=~/.vim/.undo,~/tmp,/tmp
  set undofile
  set undolevels=1000
  set viminfo+=n~/.vim/.viminfo/viminfo
  set virtualedit=all
  set novisualbell
  set wildignore+=tags
  set wildmenu
  set wildmode=list:full

  nnoremap ; :
  nnoremap <C-e> 2<C-e>
  nnoremap <C-y> 2<C-y>
  nnoremap j gj
  nnoremap k gk
  vnoremap j gj
  vnoremap k gk

  " Jump to matching pairs easily, with space
  nmap <Space> %
  vmap <Space> %

  " Fast buffer navigation
  noremap <C-h> <C-w>h
  noremap <C-j> <C-w>j
  noremap <C-k> <C-w>k
  noremap <C-l> <C-w>l

  " Command mode navigation
  cnoremap <C-h> <Left>
  cnoremap <C-l> <Right>
  cnoremap <C-k> <Up>
  cnoremap <C-j> <Down>

  " increment and decrement
  nnoremap + <C-a>
  nnoremap - <C-x>

  " Edit the snippets file
  nmap <silent> <leader>es :vsp $HOME/.vim/snippets/_.snippets<CR>

  " " Remove trailing whitespace on save
  function! s:TrimTrailingWhitespace()
    let s:view = winsaveview()
    try
      %s/\s\+$//e
    finally
      call winrestview(s:view)
    endtry
  endfunction
  autocmd BufWritePre * call s:TrimTrailingWhitespace()

  " Restore cursor position upon reopening files
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

  let g:netrw_home="~/.vim/.tmp"

  " Folding {{{
    set foldmethod=marker foldlevel=0
  "}}}
" }}}

" VIM appearance {{{
  set background=dark
  colorscheme base16-default-dark
  syntax on
  set termencoding=utf-8
  set encoding=utf-8
  set laststatus=2
  set cmdheight=2
  set title
  set colorcolumn=81

  " Colorscheme highlight overrides
  hi Normal            cterm=none ctermbg=none ctermfg=none
  hi SignColumn        cterm=none ctermbg=none ctermfg=none
  hi DiffAdd           cterm=bold ctermbg=none ctermfg=119
  hi DiffDelete        cterm=bold ctermbg=none ctermfg=167
  hi DiffChange        cterm=bold ctermbg=none ctermfg=227
  hi SignifySignAdd    cterm=bold ctermbg=none ctermfg=119
  hi SignifySignDelete cterm=bold ctermbg=none ctermfg=167
  hi SignifySignChange cterm=bold ctermbg=none ctermfg=227
  hi Folded            cterm=none ctermbg=none ctermfg=darkgrey
  hi LineNr            cterm=none ctermbg=none ctermfg=darkgrey
  hi VertSplit         cterm=none ctermbg=none ctermfg=magenta
  hi MatchParen        cterm=bold ctermbg=none ctermfg=magenta
  hi ColorColumn       cterm=none ctermbg=235  ctermfg=none
  hi CursorLine        cterm=none ctermbg=235  ctermfg=none
  hi Visual            cterm=none ctermbg=248  ctermfg=none
  hi Pmenu             cterm=none ctermbg=59   ctermfg=15
  hi PmenuSel          cterm=none ctermbg=188  ctermfg=0
  hi WildMenu          cterm=none ctermbg=188  ctermfg=0
  hi Search            cterm=none ctermbg=012  ctermfg=0
  hi IncSearch         cterm=none ctermbg=012  ctermfg=0
  hi StatusLine        cterm=none ctermbg=012  ctermfg=0
  hi Todo        cterm=none ctermbg=007  ctermfg=008

  " cursor appearance in insert mode
  let &t_SI = "\<Esc>[5 q"
  let &t_EI = "\<Esc>[0 q"
" }}}

" VIM plugins {{{

" DelimitMate  {{{
    au FileType html let b:delimitMate_matchpairs = "(:),[:],{:}"
" }}}

" NERDTree settings {{{
  nmap <leader>n :NERDTreeClose<CR>:NERDTreeToggle<CR>
  nmap <leader>m :NERDTreeClose<CR>:NERDTreeFind<CR>
  nmap <leader>N :NERDTreeClose<CR>

  " Store the bookmarks file
  let NERDTreeBookmarksFile=expand("$HOME/.vim/NERDTreeBookmarks")

  " Show the bookmarks table on startup
  let NERDTreeShowBookmarks=1

  " Show hidden files, too
  let NERDTreeShowFiles=1
  let NERDTreeShowHidden=1

  " Quit on opening files from the tree
  let NERDTreeQuitOnOpen=1

  " Highlight the selected entry in the tree
  let NERDTreeHighlightCursorline=1

  " Use a single click to fold/unfold directories and a double click to open files
  let NERDTreeMouseMode=2

  " Don't flatten single child directories
  let NERDTreeCascadeSingleChildDir=0
  let NERDTreeCascadeOpenSingleChildDir=0

  " Don't display these kinds of files
  let NERDTreeIgnore=[ '^\.git$', '\.DS_Store', '^\.sass-cache' ]
" }}}

" NERDCommenter settings {{{
  let g:NERDTrimTrailingWhitespace = 1
" }}}

" CTRL-P {{{
  let g:ctrlp_working_path_mode = '0'
  let g:ctrlp_show_hidden = 1
  let g:ctrlp_custom_ignore = '.DS_Store\|.sass-cache\|bower_components\|build\|coverage\|node_modules\|\v[\/]\.(git|hg|svn)$'
"}}}

" Yankring {{{
  let g:yankring_history_dir = '$HOME/.vim/.tmp'
  nmap <leader>r :YRShow<CR>
  function! YRRunAfterMaps()
    vmap y ygv<Esc>
  endfunction
" }}}

" Gist-vim {{{
  let g:gist_detect_filetype = 1
  let g:gist_open_browser_after_post = 1
" }}}

" Snipmate {{{
  let g:snipMate = {}
  let g:snipMate.scope_aliases = {}
  let g:snipMate.scope_aliases['scss'] = 'css'
  let g:snipMate.scope_aliases['javascript.jsx'] = 'html'
"}}}

" Airline "{{{
  let g:airline_section_b = ''
  let g:airline_section_y = ''
"}}}

" Signify "{{{
  nmap <leader>sr :SignifyRefresh<CR>
"}}}

" JSX "{{{
  let g:jsx_ext_required = 0
"}}}

" Terraform "{{{
  let g:terraform_align=1
"}}}

" JSON "{{{
  let g:vim_json_syntax_conceal = 0
"}}}

"}}}

" FileType {{{
  if has("autocmd")
    augroup conf
      autocmd BufRead,BufNewFile *.symlink setlocal filetype=zsh
    augroup END

    augroup sh
      autocmd BufRead,BufNewFile .profile setlocal filetype=sh
    augroup END

    augroup crontab
      autocmd filetype crontab setlocal nobackup nowritebackup
    augroup end

    augroup apache
      autocmd BufRead,BufNewFile httpd-vhosts.conf setlocal filetype=apache
    augroup end

    augroup readme
      autocmd BufNewFile,BufReadPost *.md setlocal spell
    augroup end

    augroup go
      autocmd filetype go setlocal tabstop=4
      autocmd filetype go setlocal shiftwidth=4
      autocmd filetype go setlocal noexpandtab
    augroup end
  endif
"}}}

" Misc mappings {{{
  " Reselect text
  nnoremap <leader>gp `[v`]

  " Edit the vimrc file
  nmap <silent> <leader>ev :e $MYVIMRC<CR>
  nmap <silent> <leader>sv :so $MYVIMRC<CR>

  " Clears the search register
  nmap <silent> <leader>/ :nohlsearch<CR>

  iab lorem Lorem ipsum dolor sit amet, consectetur adipiscing elit
  iab llorem Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam lacus ligula, accumsan id imperdiet rhoncus, dapibus vitae arcu. Nulla non quam erat, luctus consequat nisi
  iab lllorem Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam lacus ligula, accumsan id imperdiet rhoncus, dapibus vitae arcu. Nulla non quam erat, luctus consequat nisi. Integer hendrerit lacus sagittis erat fermentum tincidunt. Cras vel dui neque. In sagittis commodo luctus. Mauris non metus dolor, ut suscipit dui. Aliquam mauris lacus, laoreet et consequat quis, bibendum id ipsum. Donec gravida, diam id imperdiet cursus, nunc nisl bibendum sapien, eget tempor neque elit in tortor
"}}}
