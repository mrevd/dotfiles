" Maintained by Matt Ryan

" Plug {{{
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  endif

  call plug#begin('~/.vim/plugged')

  " vim-scripts repos
  Plug 'vim-scripts/L9'
  Plug 'vim-scripts/YankRing.vim'
  Plug 'vim-scripts/matchit.zip'

  " Github repos
  Plug 'MarcWeber/vim-addon-mw-utils'
  Plug 'Raimondi/delimitMate'
  Plug 'alvan/vim-closetag'
  Plug 'bling/vim-airline'
  Plug 'dense-analysis/ale'
  Plug 'elzr/vim-json'
  Plug 'fadein/vim-FIGlet'
  Plug 'fatih/vim-go'
  Plug 'godlygeek/tabular'
  Plug 'hail2u/vim-css3-syntax'
  Plug 'hashivim/vim-terraform'
  Plug 'justinj/vim-pico8-syntax'
  Plug 'kana/vim-textobj-user'
  Plug 'kien/ctrlp.vim'
  Plug 'leafgarland/typescript-vim'
  Plug 'mattn/gist-vim'
  Plug 'mattn/webapi-vim'
  Plug 'mg979/vim-visual-multi'
  Plug 'mhinz/vim-signify'
  Plug 'mileszs/ack.vim'
  Plug 'moll/vim-node'
  Plug 'mxw/vim-jsx'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'niftylettuce/vim-jinja'
  Plug 'othree/html5.vim'
  Plug 'pangloss/vim-javascript'
  Plug 'prettier/vim-prettier', { 'do': 'npm install' }
  Plug 'rattlion/vim-insert-image'
  Plug 'rust-lang/rust.vim'
  Plug 'scrooloose/nerdcommenter'
  Plug 'scrooloose/nerdtree'
  Plug 'tomtom/tlib_vim'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-markdown'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-rhubarb'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'vim-ruby/vim-ruby'

  call plug#end()

  " Run PlugInstall if there are missing plugins
  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
    autocmd VimEnter * PlugInstall --sync
  endif

  command! PU PlugUpdate | PlugUpgrade
"}}}

" VIM behaviour {{{
  let mapleader=","
  set mouse=a
  set autoindent
  set backspace=indent,eol,start
  set completefunc=syntaxcomplete#Complete
  set copyindent
  set dictionary+=/usr/share/dict/words
  set expandtab
  set formatoptions+=1,j
  set hidden
  set history=100
  set hlsearch
  set ignorecase
  set incsearch
  set linebreak
  set listchars=eol:⏎,tab:␉·,trail:␠,nbsp:⎵
  set nobackup
  set nocursorline
  set noerrorbells
  set nolist
  set nomodeline
  set noswapfile
  set novisualbell
  set nowrap
  set number
  set scrolloff=4
  set shell=sh
  set shiftround
  set shiftwidth=2
  set shortmess+=c
  set showcmd
  set showmatch
  set showmode
  set shortmess+=I
  set smartcase
  set smarttab
  set softtabstop=2
  set switchbuf=useopen
  set synmaxcol=800
  set textwidth=0
  set ttimeoutlen=0
  set ttyfast
  set undodir=~/.vim/.undo,~/tmp,/tmp
  set undofile
  set undolevels=1000
  set updatetime=300
  set virtualedit=all
  set wildignore+=tags
  set wildmenu
  set wildmode=list:full

  nnoremap ; :
  nnoremap <C-e> 2<C-e>
  nnoremap <C-y> 2<C-y>
  nnoremap j gj
  nnoremap k gk
  vnoremap j gj
  vnoremap k gk

  " Jump to matching pairs easily, with space
  nmap <Space> %
  vmap <Space> %

  " Fast buffer navigation
  noremap <C-h> <C-w>h
  noremap <C-j> <C-w>j
  noremap <C-k> <C-w>k
  noremap <C-l> <C-w>l

  " Command mode navigation
  cnoremap <C-h> <Left>
  cnoremap <C-l> <Right>
  cnoremap <C-k> <Up>
  cnoremap <C-j> <Down>

  " increment and decrement
  nnoremap + <C-a>
  nnoremap - <C-x>

  " Remove trailing whitespace on save
  function! s:TrimTrailingWhitespace()
    let s:view = winsaveview()
    try
      %s/\s\+$//e
    finally
      call winrestview(s:view)
    endtry
  endfunction
  autocmd BufWritePre * call s:TrimTrailingWhitespace()

  " Restore cursor position upon reopening files
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

  let g:netrw_home="~/.vim/.tmp"

  " WSL yank support
  let s:clip = '/mnt/c/Windows/System32/clip.exe'
  if executable(s:clip)
    augroup WSLYank
      autocmd!
      autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
    augroup END
  endif

  " Folding {{{
    set foldmethod=marker foldlevel=0
  "}}}
" }}}

" VIM appearance {{{
  colorscheme rattlion
  syntax on
  set cmdheight=2
  set colorcolumn=81
  set encoding=utf-8
  set laststatus=2
  set termencoding=utf-8
  set termguicolors
  set title
" }}}

" VIM plugins {{{

" Airline "{{{
  let g:airline_powerline_fonts = 1
"}}}

" Coc {{{
  let g:coc_global_extensions = [
        \'coc-css',
        \'coc-cssmodules',
        \'coc-eslint',
        \'coc-fzf-preview',
        \'coc-git',
        \'coc-go',
        \'coc-graphql',
        \'coc-highlight',
        \'coc-html',
        \'coc-html-css-support',
        \'coc-json',
        \'coc-lists',
        \'coc-lua',
        \'coc-markdownlint',
        \'coc-omnisharp',
        \'coc-prettier',
        \'coc-python',
        \'coc-rust-analyzer',
        \'coc-sh',
        \'coc-sql',
        \'coc-svg',
        \'coc-swagger',
        \'coc-tsserver',
        \'coc-yaml'
        \]

  inoremap <silent><expr> <c-n> coc#refresh()
  autocmd CursorHold * silent call CocActionAsync('highlight')
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
"}}}

" CTRL-P {{{
  let g:ctrlp_working_path_mode = '0'
  let g:ctrlp_show_hidden = 1
  let g:ctrlp_custom_ignore = '.DS_Store\|.sass-cache\|bower_components\|build\|coverage\|node_modules\|\v[\/]\.(git|hg|svn)$'
"}}}

" DelimitMate  {{{
    au FileType html let b:delimitMate_matchpairs = "(:),[:],{:}"
" }}}

" Gist-vim {{{
  let g:gist_detect_filetype = 1
  let g:gist_open_browser_after_post = 1
" }}}

" JSON "{{{
  let g:vim_json_syntax_conceal = 0
"}}}

" JSX "{{{
  let g:jsx_ext_required = 0
"}}}

" NERDTree settings {{{
  nmap <leader>n :NERDTreeClose<CR>:NERDTreeToggle<CR>
  nmap <leader>m :NERDTreeClose<CR>:NERDTreeFind<CR>
  nmap <leader>M :NERDTreeClose<CR>
  nmap <leader>N :NERDTreeClose<CR>

  " Store the bookmarks file
  let NERDTreeBookmarksFile=expand("$HOME/.vim/NERDTreeBookmarks")

  " Show the bookmarks table on startup
  let NERDTreeShowBookmarks=1

  " Show hidden files, too
  let NERDTreeShowFiles=1
  let NERDTreeShowHidden=1

  " Quit on opening files from the tree
  let NERDTreeQuitOnOpen=1

  " Highlight the selected entry in the tree
  let NERDTreeHighlightCursorline=1

  " Don't flatten single child directories
  let NERDTreeCascadeSingleChildDir=0
  let NERDTreeCascadeOpenSingleChildDir=0

  " Don't display these kinds of files
  let NERDTreeIgnore=[ '^\.git$', '\.DS_Store' ]

  let NERDTreeStatusline=''
" }}}

" NERDCommenter settings {{{
  let g:NERDTrimTrailingWhitespace = 1
" }}}

" Prettier {{{
    let g:prettier#autoformat = 0
    autocmd BufWritePre *.js,*.json,*.css,*.scss,*.less,*.graphql Prettier
" }}}

" Yankring {{{
  let g:yankring_history_dir = '$HOME/.vim/.tmp'
  nmap <leader>r :YRShow<CR>
  function! YRRunAfterMaps()
    vmap y ygv<Esc>
  endfunction
" }}}

" Signify "{{{
  nmap <leader>sr :SignifyRefresh<CR>
"}}}

" Terraform "{{{
  let g:terraform_align=1
"}}}
"}}}

" FileType {{{
  if has("autocmd")
    augroup apache
      autocmd BufRead,BufNewFile httpd-vhosts.conf setlocal filetype=apache
    augroup end

    augroup conf
      autocmd BufRead,BufNewFile *.symlink setlocal filetype=zsh
    augroup END

    augroup crontab
      autocmd filetype crontab setlocal nobackup nowritebackup
    augroup end

    augroup go
      autocmd filetype go setlocal tabstop=4
      autocmd filetype go setlocal shiftwidth=4
      autocmd filetype go setlocal noexpandtab
    augroup end

    augroup quickfix
      autocmd filetype quickfix setlocal cursorline
    augroup END

    augroup readme
      autocmd BufNewFile,BufReadPost *.md setlocal spell
    augroup end

    augroup sh
      autocmd BufRead,BufNewFile .profile setlocal filetype=sh
    augroup END
  endif
"}}}

" Misc mappings {{{
  " Reselect text
  nnoremap <leader>gp `[v`]

  " Edit the vimrc file
  nmap <silent> <leader>ev :e ~/.vimrc<CR>
  nmap <silent> <leader>sv :so ~/.vimrc<CR>

  " Clears the search register
  nmap <silent> <leader>/ :nohlsearch<CR>

  iab lorem Lorem ipsum dolor sit amet, consectetur adipiscing elit
  iab llorem Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam lacus ligula, accumsan id imperdiet rhoncus, dapibus vitae arcu. Nulla non quam erat, luctus consequat nisi
  iab lllorem Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam lacus ligula, accumsan id imperdiet rhoncus, dapibus vitae arcu. Nulla non quam erat, luctus consequat nisi. Integer hendrerit lacus sagittis erat fermentum tincidunt. Cras vel dui neque. In sagittis commodo luctus. Mauris non metus dolor, ut suscipit dui. Aliquam mauris lacus, laoreet et consequat quis, bibendum id ipsum. Donec gravida, diam id imperdiet cursus, nunc nisl bibendum sapien, eget tempor neque elit in tortor
"}}}
